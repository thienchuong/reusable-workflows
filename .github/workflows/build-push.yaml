name: Build and push docker iamge

on:
  workflow_call:
    inputs:
      aws_region:
        default: ap-southeast-1
        type: string
      role-to-assume:
        required: true
        type: string
      aws-ecr:
        required: true
        type: string
      docker-tag:
        default: latest # will override by the caller
        type: string

permissions:
  id-token: write
  contents: read        

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Lint and Test
        run: |
          npm run lint
          npm test

  build_and_push:
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout code
        uses: actions/checkout@v4
      
      # use AssumeRoleWithWebIdentity to assume role
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ inputs.role-to-assume }}
      
      - name: Tag Docker image with datetime format
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.aws-ecr }}/${{ github.event.repository.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=ref,event=tag
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Create and use a new builder instance
        run: |
          docker buildx create --name mybuilder --use
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6.8.0
        id: docker_build
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          builder: mybuilder
          cache-from: type=registry,ref=${{ inputs.aws-ecr }}/${{ github.event.repository.name }}:cache
          cache-to: type=registry,mode=max,image-manifest=true,oci-mediatypes=true,ref=${{ inputs.aws-ecr }}/${{ github.event.repository.name }}:cache
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ inputs.aws-ecr }}/${{ github.event.repository.name }}:${{ github.ref_name }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM'
        continue-on-error: true

      - name: Deploy dispatch for main app
        uses: peter-evans/repository-dispatch@v2.1.2
        # if contains 'v' or 'dev' or 'stg' in the image tag, then deploy to prod
        if: contains(github.ref_name, 'v') || contains(github.ref_name, 'dev') || contains(github.ref_name, 'stg')
        with:
          token: ${{ secrets.ORG_CI_TOKEN }}
          repository: thienchuong/argocd-service
          event-type: deploy-dev
          client-payload: |-
            {
            "repo": "${{ github.event.repository.name }}",
            "service": "${{ github.event.repository.name }}",
            "image_tag": "${{ github.ref_name }}"
            }

      - name: Deploy dispatch for canary app
        uses: peter-evans/repository-dispatch@v2.1.2
        # if contains 'canary' in the image tag, then deploy to canary
        if: contains(github.ref_name, 'canary')
        with:
          token: ${{ secrets.ORG_CI_TOKEN }}
          repository: thienchuong/argocd-service
          event-type: deploy-canary
          client-payload: |-
            {
            "repo": "${{ github.event.repository.name }}",
            "service": "${{ github.event.repository.name }}",
            "image_tag": "${{ github.ref_name }}"
            }
